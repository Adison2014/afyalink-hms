server {
    listen 80; # Nginx listens on port 80 inside the container

    # --- Serve static files for the React application ---
    location / {
        root /usr/share/nginx/html; # Directory where your React app's build output is copied
        index index.html index.htm;
        try_files $uri $uri/ /index.html; # Essential for SPAs: if a file isn't found, fall back to index.html
                                         # This allows React Router to handle client-side routing

        # Optional: Add caching headers for static assets (good for production)
        # expires 30d;
        # add_header Cache-Control "public, no-transform";
    }

    # --- Proxy API requests to the backend server ---
    # This assumes your React app makes API calls to paths starting with /api/
    location /api/ {
        # 'server' is the name of your backend service in docker-compose.yml
        # '5000' is the internal port your Node.js backend listens on
        proxy_pass http://server:5000; 

        # WebSocket proxy settings (if your API also handles WebSockets)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 86400s; # Long timeout for WebSockets
    }

    # Optional: If your backend has a dedicated WebSocket endpoint not under /api/,
    # e.g., if you connect to ws://localhost:8080/websocket
    location /ws/ { # Adjust this path to match your server's WebSocket path
        proxy_pass http://server:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 86400s;
    }
}